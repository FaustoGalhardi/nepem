+++
date = "2020/04/03"
lastmod = "2020/11/06"
headless = true
+++


```{r global_options, include = FALSE}
knitr::opts_chunk$set(comment = "#", fig.align = "center", collapse = TRUE)
```



```{r, include = FALSE, message=FALSE, warning=FALSE}
# List of required packages
required_packages <- c("tidyverse", "bib2df", "scholar", "stringi", "glue")

# Function to check if a package is installed, and if not, install it
install_if_missing <- function(packages) {
  # Identify packages that are not installed
  missing_packages <- packages[!(packages %in% installed.packages()[,"Package"])]
  
  # Install missing packages
  if(length(missing_packages)) {
    install.packages(missing_packages)
  }
  
  # Load all packages
  invisible(lapply(packages, library, character.only = TRUE))
}

# Use the function to install and load the packages
install_if_missing(required_packages)

ref <- bib2df("D:/Desktop/nepem/content/publication/ref.bib")
i <- !is.na(ref$JOURNAL)
tb_year <- 
  ref[i, ] %>%
  count(YEAR) %>%
  mutate(ac = cumsum(n)) %>%
  pivot_longer(-YEAR, names_to = "medida", values_to = "qtd") %>% 
  mutate(medida = factor(medida,
                         levels = c("n", "ac"),
                         labels = c("Anual", "Acumulado")))
# Tabela auxiliar para anotações.
u <- data.frame(medida = "Anual",
                YEAR = 2017,
                y = sum(i)/(diff(range(ref$YEAR)) + 1))
u
# Gráfico.
gg1 <-
  ggplot(tb_year,
         aes(x = YEAR, y = qtd, group = 1)) +
  facet_wrap(~medida,
             scales = "free_y", ) +
  geom_point() +
  geom_line() +
  geom_smooth(data = filter(tb_year, medida == "Acumulado"),
              linetype = 2,
              size = 0.3,
              color = "darkorange",
              se = FALSE,
              method = "lm") +
  geom_label(mapping = aes(label = qtd),
             label.size = 0.4,
             # fill = "gray25",
             # color = "white",
             # label.padding = unit(0.15, "lines"),
             nudge_x = 0.1,
             hjust = 1,
             vjust = -0.3) +
  geom_hline(data = u,
             mapping = aes(yintercept = y),
             lty = 3,
             color = "darkorange") +
  geom_text(data = u,
            inherit.aes = FALSE,
            mapping = aes(x = YEAR,
                          y = y,
                          label = sprintf("Avg: %0.1f", y)),
            # label = sprintf("Média: %0.1f", y)),
            hjust = 0, vjust = -0.5) +
  labs(x = c("Year",
             "Ano")[1],
       y = c("Número de publicações",
             "Número de publicações")[1],
       title = c("Publications in journals",
                 "Publicações em periódicos")[1])+
  scale_y_continuous(expand = expansion(mult = c(0.05, 0.15)))+ 
  scale_x_continuous(expand = expansion(mult = c(0.1, 0.1)),
                     breaks = unique(tb_year$YEAR))+
  theme(panel.grid.minor = element_blank())

cap <- sprintf("Numero de publicações do grupo ao longo do tempo. Lista atualizada em %s.",
               Sys.Date())



```

## Progresso da produção

```{r message=FALSE, warning=FALSE, echo=FALSE, fig.align = "center", fig.height = 4.32, fig.width = 10, fig.cap = cap, warning=FALSE, message=FALSE}
gg1

cap <- sprintf("Número publicações ao longo do tempo. Lista atualizada em  %s.",
               Sys.Date())
```



<br>
<br>

## Progresso das citações
```{r, echo = FALSE, fig.align = "center", fig.height = 4.32, fig.width = 10, fig.cap = cap, warning=FALSE, message=FALSE}

cap <- sprintf("Número de citações ao longo do tempo. Lista atualizada em  %s.",
               Sys.Date())


library(scholar)
library(tidyverse)
id <- 'QjxIJkcAAAAJ'
## Get his citation history, i.e. citations to his work in a given year
ct <-
  get_citation_history(id) %>% 
  rename(Yearly = cites) %>% 
  mutate(Accumulated = cumsum(Yearly),) %>% 
  pivot_longer(-year) %>% 
  mutate(name = as.factor(name),
         name = fct_relevel(name, "Acumulado", "Anual"))

## Plot citation trend
library(ggplot2)
ggplot(ct, aes(year, value)) +
  geom_line() +
  geom_point() +
  facet_wrap(~name, scales = "free") +
  geom_label(mapping = aes(label = value),
             label.size = 0.4,
             # fill = "gray25",
             # color = "white",
             # label.padding = unit(0.15, "lines"),
             nudge_x = 0.1,
             hjust = 1,
             vjust = -0.3) +
  scale_y_continuous(expand = expansion(mult = c(0.05, 0.15)))+ 
  scale_x_continuous(expand = expansion(mult = c(0.1, 0.1)),
                     breaks = unique(ct$year))+
  labs(x = "Ano",
       y = "Número de citações")
```


```{r, echo = FALSE, eval = FALSE, fig.align = "center", fig.height = 4.32, fig.width = 10, fig.cap = cap, warning=FALSE, message=FALSE}

# Load necessary libraries
library(tidyverse)
library(bib2df)
library(glue)

# Define publication types as a named vector for easy lookup
publication_types <- c(
  'Uncategorized',           # 0
  'Conference proceedings',  # 1
  'Journal',                 # 2
  'Work in progress',        # 3
  'Technical report',        # 4
  'Book',                    # 5
  'Book chapter',            # 6
  'Working paper',           # 7
  'Peer-reviewed'            # 8
)

# Function to map categories to publication types
get_publication_type <- function(category) {
  # Define a mapping from category to publication type index
  type_map <- c(
    "ARTICLE" = 2,           # Maps "ARTICLE" to "Journal"
    "INPROCEEDINGS" = 1      # Maps "INPROCEEDINGS" to "Conference proceedings"
    # Add more mappings as needed
  )
  
  # Get the index based on category or default to 'Uncategorized' (0)
  type_index <- type_map[toupper(category)] %>% ifelse(is.na(.), 0, .)
  
  # Return the corresponding publication type
  return(type_index)
}

clear_name <- function(name){
    # Remove LaTeX encoding for accents and special characters
    name <- gsub("\\{\\\\'.\\}", "u", name) # Handles specific LaTeX encodings like {\'u}
    name <- gsub("\\\\[a-zA-Z]+\\{[^}]+\\}", "", name) # Removes broader LaTeX commands
    name <- gsub("[{}\\\\']", "", name) # Removes remaining curly braces, backslashes, and single quotes
    name <- gsub("%", " percent", name) 
    return(name)
}

# Function to convert to desired format "LastName F."
convert_names <- function(names) {
  # Apply transformation to each name
  formatted_names <- sapply(names, function(name) {
# Remove LaTeX encoding for accents and special characters
    name <- clear_name(name)

    
    # Split by comma to separate last name and first names
    parts <- str_split(name, ",\\s*")[[1]]
    last_name <- parts[1]
    first_names <- parts[2]
    
    # Extract the first initial of the first name
    first_initial <- substr(first_names, 1, 1)
    
    # Combine last name with initial
    formatted_name <- paste0(last_name, " ", first_initial, ".")
  })
  
  # Return the formatted names
  return(unname(formatted_names))
}



# Function to create .md files from .bib entries
create_md_files <- function(bib_file) {
  
  # Read the .bib file into a data frame
  bib_data <- bib2df("D:/Desktop/nepem/content/publication/ref.bib")
  
  # Iterate through each entry
  for (i in 1:nrow(bib_data)) {
    entry <- bib_data[i, ]
    
    # Extract required fields and handle missing data
    title <- entry$TITLE %>% ifelse(is.na(.), "", .) |> clear_name()
    year <- entry$YEAR %>% ifelse(is.na(.), "0000", .)
    
    authors <- paste0("[\"", paste(convert_names(entry$AUTHOR[[1]]), collapse = "\", \""), "\"]")
    publication <- glue("In: **{clear_name(entry$JOURNAL)}**, {entry$VOLUME}({entry$NUMBER}):{entry$PAGES}, [{entry$DOI}]({entry$DOI})")
    abstract <- 
      entry$ABSTRACT %>% ifelse(is.na(.), "", .) |> 
      str_to_sentence() |> 
      clear_name()
    
    # Define the content of the .md file
    md_content <- glue(
      "+++\n",
      'title = "{title}"\n',
      'date = "{year}-01-01"\n',
      'publication_types = ["{get_publication_type(entry$CATEGORY)}"]\n',
      'authors = {authors}\n',
      'publication = "{publication}"\n',
      'abstract = "{abstract}"\n',
      'abstract_short = ""\n',
      'tags = []\n',
      'image_preview = ""\n',
      'selected = false\n',
      'projects = []\n',
      'url_pdf = ""\n',
      'url_preprint = ""\n',
      'url_code = ""\n',
      'url_dataset = ""\n',
      'url_project = ""\n',
      'url_slides = ""\n',
      'url_video = ""\n',
      'url_poster = ""\n',
      'url_source = ""\n',
      'math = true\n',
      'highlight = true\n',
      '[header]\n',
      'image = ""\n',
      'caption = ""\n',
      "+++\n"
    )
    
    # Define the file name (use title or another unique field for naming)
    file_name <- glue("content/publication/my-md-folder/{entry$BIBTEXKEY %>% str_replace_all('[^\\\\w\\\\s]', '') %>% str_replace_all('\\\\s+', '_')}.md")
    
    # Write the .md file
    writeLines(md_content, file_name)
  }
}

# Example usage
create_md_files("D:/Desktop/nepem/content/publication/ref.bib")


```


<br>
<br>

# List of publications
